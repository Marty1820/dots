(defwidget container [name ?click ?tooltip ?class icon info]
  (button :class "b_container b_${name}"
    :onclick "${click}"
    :tooltip "${tooltip}"
    (box :orientation "h"
      :space-evenly "false"
      (label :class "b_cont_icon b_${name}_icon ${class}"
        :text "${icon}")
      (label :class "b_cont_info b_${name}_info"
        :text "${info}")
    )
  )
)

;; Left Modules

; Power Menu
(defwidget power []
  (eventbox
    :onhover "${EWW_CMD} update power=true"
    :onhoverlost "${EWW_CMD} update power=false"
    (box :class "b_power"
      :space-evenly "false"
      :orientation "h"
      (button :class "b_button b_but_shutdown"
        :tooltip "Shut down"
        :onclick "systemctl poweroff" "")
        (revealer :transition "slideright"
          :reveal power
          (box :orientation "h"
            :space-evenly "false"
            (button :class "b_button b_but_reboot"
              :tooltip "Reboot"
              :onclick "systemctl reboot" "󰜉")
            (button :class "b_button b_but_sleep"
              :tooltip "Suspend"
              :onclick "systemctl suspend-then-hibernate" "󰒲")
            (button :class "b_button b_but_logoff"
              :tooltip "Logoff"
              :onclick "niri msg action quit --skip-confirmation" "󰍃")
        )
      )
    )
  )
)

; Date
(defwidget date []
  (container
    :name "date"
    :click "eww open --toggle calendar"
    :icon "󰃶"
    :info "${formattime(EWW_TIME, "%a, %b %d")}"
  )
)

; Clock
(defwidget clock []
  (container
    :name "clock"
    :icon "${formattime(EWW_TIME, "%I") == 1 ? "󱐿" :
             formattime(EWW_TIME, "%I") == 2 ? "󱑀" :
             formattime(EWW_TIME, "%I") == 3 ? "󱑁" :
             formattime(EWW_TIME, "%I") == 4 ? "󱑂" :
             formattime(EWW_TIME, "%I") == 5 ? "󱑃" :
             formattime(EWW_TIME, "%I") == 6 ? "󱑄" :
             formattime(EWW_TIME, "%I") == 7 ? "󱑅" :
             formattime(EWW_TIME, "%I") == 8 ? "󱑆" :
             formattime(EWW_TIME, "%I") == 9 ? "󱑇" :
             formattime(EWW_TIME, "%I") == 10 ? "󱑈" :
             formattime(EWW_TIME, "%I") == 11 ? "󱑉" :
             formattime(EWW_TIME, "%I") == 12 ? "󱑊" : "󰥕"}"
    :info "${formattime(EWW_TIME, "%I:%M %p")}"
  )
)

; Weather
(defwidget weather []
  (container
    :name "weather"
    :click "${weather == "true" ? "sh -c '${EWW_CMD} update weather=false;
             (sleep 0.4 && ${EWW_CMD} close weather) &'" :
           "${EWW_CMD} open weather && ${EWW_CMD} update weather=true"}"
    :tooltip "Weather Info"
    :class "${w_temp >= 90 ? "hot": w_temp <= 32 ? "cold" : ""}"
    :icon "${weather_icons[w_icon]}"
    :info "${round(w_temp, 0)}"
  )
)

(defwidget left []
  (box :class "b_left"
    :orientation "h"
    :space-evenly "false"
    :halign "start"
    (power)
    (date)
    (clock)
    (weather)
  )
)

;; Center Modules
(deflisten b_window :initial '{"title":"","app_id":""}'
  `niri msg event-stream | while IFS= read -r _; do
    niri msg -j focused-window; done`)
(defwidget center []
  (box :class "b_center"
    :orientation "h"
    :halign "center"
    (label :class "b_window_name ${b_window == "null" ? "empty" : ""}"
      :text "${b_window == "null" ? "" : substring(b_window.title, 0, 75)}")
  )
)

;; Rigth Modules

; Volume Icon
(defwidget volume []
  (container
    :name "volume"
    :click "wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle"
    :class "${mute == "[MUTED]" ? "mute" : ""}"
    :icon "${mute == "[MUTED]" ? "" : volume >= 50 ? "" : ""}"
    :info "${volume == "" ? 0 : volume}"
  )
)

; Network Icon
(defwidget network []
  (container
    :name "network"
    :click "nm-connection-editor &"
    :class "${net.class}"
    :icon "${net.icon}"
    :info "${net.name}"
  )
)

; Backlight Brightness
(defwidget brightness []
  (container
    :name "brightness"
    :click "$HOME/.local/bin/ABToggle.sh"
    :icon "${brightness >= 75 ? "󰃠" : brightness >= 50 ? "󰃟"
           : brightness >= 25 ? "󰃞" : "󰃝"}"
    :info "${brightness}"
  )
)

; Battery Icon
(defwidget battery []
  (container
    :name "battery"
    :class "${EWW_BATTERY.BAT1.status   == "Charging" ? "charging" :
              EWW_BATTERY.BAT1.capacity <=   15       ? "critical" :
              EWW_BATTERY.BAT1.capacity <=   20       ? "low" : ""}"
    :icon "${EWW_BATTERY.BAT1.status == "Charging" ? "󰚥" :
             EWW_BATTERY.BAT1.capacity >= 80 ? "" :
             EWW_BATTERY.BAT1.capacity >= 60 ? "" :
             EWW_BATTERY.BAT1.capacity >= 40 ? "" :
             EWW_BATTERY.BAT1.capacity >= 20 ? "" : ""}"
    :info "${EWW_BATTERY.BAT1.capacity}"
  )
)

(defwidget right []
  (box :class "b_right"
    :orientation "h"
    :halign "end"
    :space-evenly "false"
    (volume)
    (network)
    (brightness)
    (battery)
  )
)

(defwindow bar
  :namespace "eww-bar"
  :monitor 0
  :geometry (geometry
              :x "0"
              :y "0"
              :width "100%"
              :anchor "top center")
  :stacking "fg"
  :exclusive "true"
  (centerbox :class "eww_bar"
    :orientation "h"
    (left)
    (center)
    (right)
  )
)
